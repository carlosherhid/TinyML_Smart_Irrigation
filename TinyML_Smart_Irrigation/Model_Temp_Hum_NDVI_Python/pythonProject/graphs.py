import matplotlib.pyplot as plt

# Número de experimento
experimentos = list(range(1, 40))
ndvi_percentiles = [(exp, 100-exp) for exp in experimentos]
# Datos extraídos de los resultados proporcionados
standard_deviation_rmse = [
    0.0040658355061734056, 0.004645645114609998, 0.003149895714889922, None, 0.0015121717212824351,
    0.002800405942524638, 0.0025275122790505587, 0.004185049201128169, 0.0019941312457082846,
    0.0037981369271724275, 0.0030718323543252194, 0.004385931890231516, 0.0034771150479189607,
    0.002388121055281017, 0.004052195347166455, 0.003873583539801204, 0.004782226931048555,
    0.004899413170756812, 0.004075816733223704, 0.0039797985658778234, 0.005579411676923506,
    0.004842340192127309, 0.0048184347024315295, 0.004524750099260601, 0.0026338431248398874,
    0.0027494288240817676, 0.0039885034246569945, 0.004471935939672686, 0.0033462429782006643,
    0.0048729324420081635, 0.003672052470491798, 0.0032114015745182676, 0.002484689778615113,
    0.003096057896893491, 0.0035409238934306668, 0.004189532392229266, 0.0025773292221616603,
    0.0021399284939578296, 0.0027726245977888774
]

standard_deviation_cvrmse = [
    4.6652474603424565, 2.542993224925353, 0.7443850815308158, None, 27.4119793458382,
    10.664256849722264, 10.497962429803822, 10.885408712360263, 5.16944746454482,
    6.432015484699448, 4.677432826485949, 5.088628053157406, 3.913186129461356,
    3.186801499771695, 3.7838178797038364, 4.36573314806153, 3.2609367336029234,
    3.2130823911842086, 2.8795484513588914, 2.801110568904427, 3.361200767641422,
    2.7352801199903816, 2.5450900462352104, 2.9621007914414172, 1.325378169786401,
    1.1644605498257048, 1.5177080740597786, 1.4354390081592665, 1.3246733077216037,
    1.4728282804874135, 1.4167984322369276, 1.186843133814793, 0.8788749044920172,
    0.858841588807368, 1.0974386172250674, 0.9761148971271764, 0.6932930871958907,
    0.6069059892494717, 0.7465491483508502
]

best_rmse = [
    0.045902832244502256, 0.047995680228180744, 0.03672233830333861, 0.03212426214696595,
    0.038138337071386745, 0.04212512122116777, 0.044254941735492784, 0.043244844416410765,
    0.04516658666523469, 0.0435998831186349, 0.04630950812733256, 0.049491352140692176,
    0.04945601402525323, 0.05114581844059862, 0.04932662066192608, 0.05008126951957285,
    0.054214804891254874, 0.05338722467766584, 0.0499754159819911, 0.05593925174509759,
    0.053596890169204936, 0.056453236552929095, 0.0554073492398356, 0.056137696836576795,
    0.0549575618964902, 0.054387508475389465, 0.05224549859588091, 0.048571093469789,
    0.04876988608392494, 0.046876674165694326, 0.04499767024831797, 0.042587323355255856,
    0.042847801760245385, 0.0387294293269203, 0.037975990174402556, 0.03467321336778098,
    0.03435101428527251, 0.034218666978112024, 0.031511374321908855
]

best_cvrmse = [
    43.01160419812112, 22.83677649987127, 11.222559755387977, float('inf'), 123.8209302468324,
    92.76935437656059, 156.38044379621837, 90.6608085669311, 78.10837687841583, 75.6910676759226,
    54.245482928452326, 60.26038479215809, 56.19765940748368, 49.906508923601166, 41.7852710255781,
    39.38043916766885, 40.66018917104748, 40.2508458953788, 32.67948634302872, 36.32821168297719,
    32.0214802108696, 28.272466240047724, 26.626468795548192, 26.27351510985117, 24.47638812400562,
    23.54464537990396, 20.416222537691, 17.898741065753825, 17.13016295346554, 15.919853998088046,
    14.140050369373046, 12.80876836272621, 12.285034464127408, 10.44130712090271, 10.304722651169584,
    8.672770839061423, 8.108238974303008, 7.660214763674859, 7.059466666201522
]

import matplotlib.pyplot as plt
import numpy as np

# Experiment numbers
experiments = list(range(1, 40))

# Ensure all 'None' values are converted to np.nan for consistency in the plots
standard_deviation_rmse = [np.nan if x is None else x for x in standard_deviation_rmse]
standard_deviation_cvrmse = [np.nan if x is None else x for x in standard_deviation_cvrmse]

# Plot for Standard Deviation of CVRMSE
plt.figure(figsize=(10, 5))
plt.plot(experiments, standard_deviation_cvrmse, label='Standard Deviation CVRMSE', color='purple', marker='x')
plt.title('Standard Deviation of CVRMSE Across Experiments')
plt.ylabel('Standard Deviation CVRMSE')
plt.xlabel('NDVI Percentile Considered Anomaly (%)')
plt.xticks(experimentos, labels=[f"({exp}, {100-exp})" for exp in experimentos], rotation=45)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# Plot for Best CVRMSE
plt.figure(figsize=(10, 5))
plt.plot(experiments, best_cvrmse, label='Best CVRMSE', color='green', linestyle='--')
plt.title('Best CVRMSE Across Experiments')
plt.xlabel('NDVI Percentile Considered Anomaly (%)')
plt.ylabel('Best CVRMSE')
plt.xticks(experimentos, labels=[f"({exp}, {100-exp})" for exp in experimentos], rotation=45)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# Plot for Standard Deviation of RMSE
plt.figure(figsize=(10, 5))
plt.plot(experiments, standard_deviation_rmse, label='Standard Deviation RMSE', color='blue', marker='o')
plt.title('Standard Deviation of RMSE Across Experiments')
plt.xlabel('NDVI Percentile Considered Anomaly (%)')
plt.ylabel('Standard Deviation RMSE')
plt.xticks(experimentos, labels=[f"({exp}, {100-exp})" for exp in experimentos], rotation=45)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# Plot for Best RMSE
plt.figure(figsize=(10, 5))
plt.plot(experiments, best_rmse, label='Best RMSE', color='red', marker='^')
plt.title('Best RMSE Across Experiments')
plt.xlabel('NDVI Percentile Considered Anomaly (%)')
plt.ylabel('Best RMSE')
plt.xticks(experimentos, labels=[f"({exp}, {100-exp})" for exp in experimentos], rotation=45)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# quantized comparison

# RMSE para modelos sin cuantizar y cuantizados
rmse_unquantized = [
    0.045902832244502256, 0.047995680228180744, 0.03672233830333861, 0.03212426214696595,
    0.038138337071386745, 0.04212512122116777, 0.044254941735492784, 0.043244844416410765,
    0.04516658666523469, 0.0435998831186349, 0.04630950812733256, 0.049491352140692176,
    0.04945601402525323, 0.05114581844059862, 0.04932662066192608, 0.05008126951957285,
    0.054214804891254874, 0.05338722467766584, 0.0499754159819911, 0.05593925174509759,
    0.053596890169204936, 0.056453236552929095, 0.0554073492398356, 0.056137696836576795,
    0.0549575618964902, 0.054387508475389465, 0.05224549859588091, 0.048571093469789,
    0.04876988608392494, 0.046876674165694326, 0.04499767024831797, 0.042587323355255856,
    0.042847801760245385, 0.0387294293269203, 0.037975990174402556, 0.03467321336778098,
    0.03435101428527251, 0.034218666978112024, 0.031511374321908855
]

rmse_quantized = [
    0.0459440503263432, 0.04805842867330443, 0.036704531368361985, 0.032132333582149196,
    0.0381098048029456, 0.04209408135719997, 0.04419432390339261, 0.04329977140943105,
    0.04524487186427045, 0.04365722119268742, 0.04643944755063909, 0.0494770745923557,
    0.04952383973647578, 0.05121641366008366, 0.04928416846268371, 0.050187026657422786,
    0.054315096572225545, 0.05337378068696531, 0.05011004484565711, 0.05610000382278933,
    0.05368440882353592, 0.0565393873992134, 0.05538593305746737, 0.05615443690914041,
    0.05507195784211115, 0.054495824505892035, 0.05227053958505638, 0.04855612374160739,
    0.048762578423930385, 0.046917242273570504, 0.045073603704872914, 0.04256438479357217,
    0.04280982830087596, 0.03868442029835674, 0.03795006950306056, 0.03487349372699119,
    0.03435222700245728, 0.03427683888107166, 0.03160083008580504
]

plt.figure(figsize=(14, 7))
plt.plot(experimentos, rmse_unquantized, label='Unquantized Model RMSE', marker='o')
plt.plot(experimentos, rmse_quantized, label='Quantized Model RMSE', marker='x')
plt.title('Comparison of Unquantized vs Quantized Model Performance (RMSE)')
plt.xlabel('NDVI Percentile Considered Anomaly (%)')
plt.ylabel('RMSE')
plt.legend()
plt.xticks(experimentos, labels=[f"({exp}, {100-exp})" for exp in experimentos], rotation=45)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
# Data for CVRMSE of unquantized and quantized models
cvrmse_no_quantized = np.array([
    43.01160419812112, 22.83677649987127, 11.222559755387977, np.inf,
    123.8209302468324, 92.76935437656059, 156.38044379621837, 90.6608085669311,
    78.10837687841583, 75.6910676759226, 54.245482928452326, 60.26038479215809,
    56.19765940748368, 49.906508923601166, 41.7852710255781, 39.38043916766885,
    40.66018917104748, 40.2508458953788, 32.67948634302872, 36.32821168297719,
    32.0214802108696, 28.272466240047724, 26.626468795548192, 26.27351510985117,
    24.47638812400562, 23.54464537990396, 20.416222537691, 17.898741065753825,
    17.13016295346554, 15.919853998088046, 14.140050369373046, 12.80876836272621,
    12.285034464127408, 10.44130712090271, 10.304722651169584, 8.672770839061423,
    8.108238974303008, 7.660214763674859, 7.059466666201522
])

cvrmse_quantized = np.array([
    35.79466660310659, 22.92815196883085, 12.481231741221997, 67.17110939785967,
    67.75076409412556, 52.823945232564654, 57.54253127953468, 51.09987207467608,
    48.38526142811441, 43.29297739251005, 42.64638009065313, 41.834274452073075,
    39.54302750551616, 38.28576474859803, 34.6028929628294, 32.90433899052464,
    33.799671165363996, 31.47199541570173, 28.03736201182697, 30.249645612806685,
    27.554243146935146, 27.413036314770125, 25.714897490967005, 25.132055679615295,
    23.72857013186768, 22.658933527687232, 20.8181373550823, 18.608334847083068,
    18.168591692212306, 16.854553355617735, 15.743592897755775, 14.460419823704388,
    14.094886088772768, 12.317427358680748, 11.698576445552575, 10.414481974463987,
    9.989882162196594, 9.683643446197495, 8.70880776130831
])

# Assuming experiments is a sequence of numbers from 1 up to the length of the data
experiments = np.arange(1, len(cvrmse_no_quantized) + 1)

# Data for CVRMSE of unquantized and quantized models (arrays already defined in your question)

# Replace inf and nan with maximum values for visualization
cvrmse_no_quantized[np.isinf(cvrmse_no_quantized)] = np.nanmax(cvrmse_no_quantized[np.isfinite(cvrmse_no_quantized)])
cvrmse_quantized[np.isinf(cvrmse_quantized)] = np.nanmax(cvrmse_quantized[np.isfinite(cvrmse_quantized)])

# Plot
plt.figure(figsize=(15, 7))

# Bar chart for unquantized CVRMSE
plt.bar(experiments - 0.2, cvrmse_no_quantized, width=0.4, label='Unquantized')

# Bar chart for quantized CVRMSE
plt.bar(experiments + 0.2, cvrmse_quantized, width=0.4, label='Quantized')

plt.xlabel('NDVI Percentile Considered Anomaly (%)')
plt.ylabel('CVRMSE')
plt.title('Comparison of CVRMSE between Unquantized and Quantized Models')
plt.grid(axis='y')
plt.xticks(experimentos, labels=[f"({exp}, {100-exp})" for exp in experimentos], rotation=45)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# size reduction comparison
# Size reduction percentage due to quantization for each experiment
size_no_quantized = np.array([
    35112, 35208, 35208, 35208, 35208, 35208, 35208, 35208, 35208, 35208,
    35208, 35208, 35208, 35208, 35208, 35208, 35208, 35208, 35208, 35208,
    35208, 35208, 35208, 35208, 35208, 35208, 35208, 35208, 35208, 35208,
    35208, 35208, 35208, 35208, 35208, 35208, 35208, 35208, 35208
])

size_quantized = np.array([
    6192, 6240, 6240, 6240, 6240, 6240, 6240, 6240, 6240, 6248, 6248, 6248,
    6248, 6248, 6248, 6248, 6248, 6248, 6248, 6248, 6248, 6248, 6248, 6248,
    6248, 6248, 6248, 6248, 6248, 6248, 6248, 6280, 6280, 6280, 6280, 6280,
    6280, 6280, 6280
])

# Calculate percentage reduction
reduction_percentage = (1 - (size_quantized / size_no_quantized)) * 100

# Plot
plt.figure(figsize=(15, 7))
plt.plot(experiments, reduction_percentage, marker='o', linestyle='-', color='blue')
plt.ylabel('Size Reduction Percentage')
plt.xlabel('NDVI Percentile Considered Anomaly (%)')
plt.title('Model Size Reduction Percentage due to Quantization')
plt.xticks(experimentos, labels=[f"({exp}, {100-exp})" for exp in experimentos], rotation=45)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.grid(axis='y')
plt.show()
